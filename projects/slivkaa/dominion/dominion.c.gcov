        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:21
        -:    0:Programs:21
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
      270:    8:int compare(const void* a, const void* b) {
      270:    9:  if (*(int*)a > *(int*)b)
    #####:   10:    return 1;
      270:   11:  if (*(int*)a < *(int*)b)
       72:   12:    return -1;
      198:   13:  return 0;
        -:   14:}
        -:   15:
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        9:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
        9:   44:  SelectStream(1);
        9:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
        9:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
        9:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
       99:   57:  for (i = 0; i < 10; i++)
        -:   58:    {
      990:   59:      for (j = 0; j < 10; j++)
        -:   60:        {
      900:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
        9:   73:  if (numPlayers == 2)
        -:   74:    {
        9:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
        9:   87:  if (numPlayers == 2)
        -:   88:    {
        9:   89:      state->supplyCount[estate] = 8;
        9:   90:      state->supplyCount[duchy] = 8;
        9:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
        9:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        9:  102:  state->supplyCount[silver] = 40;
        9:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      189:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  107:  {
     1485:  108:    for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  109:    {
     1395:  110:      if (kingdomCards[j] == i)
        -:  111:      {
        -:  112:        //check if card is a 'Victory' Kingdom card
       90:  113:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  114:        {
    #####:  115:          if (numPlayers == 2){ 
    #####:  116:            state->supplyCount[i] = 8; 
        -:  117:          }
    #####:  118:          else{ state->supplyCount[i] = 12; }
        -:  119:        }
        -:  120:        else
        -:  121:        {
       90:  122:          state->supplyCount[i] = 10;
        -:  123:        }
       90:  124:        break;
        -:  125:      }
        -:  126:      else    //card is not in the set choosen for the game
        -:  127:      {
     1305:  128:        state->supplyCount[i] = -1;
        -:  129:      }
        -:  130:    }
        -:  131:  }
        -:  132:
        -:  133:  ////////////////////////
        -:  134:  //supply intilization complete
        -:  135:  //set player decks
       27:  136:  for (i = 0; i < numPlayers; i++)
        -:  137:  {
       18:  138:    state->deckCount[i] = 0;
       72:  139:    for (j = 0; j < 3; j++)
        -:  140:    {
       54:  141:      state->deck[i][j] = estate;
       54:  142:      state->deckCount[i]++;
        -:  143:    }
      144:  144:    for (j = 3; j < 10; j++)
        -:  145:    {
      126:  146:      state->deck[i][j] = copper;
      126:  147:      state->deckCount[i]++;		
        -:  148:    }
        -:  149:  }
        -:  150:
        -:  151:  //shuffle player decks
       27:  152:  for (i = 0; i < numPlayers; i++)
        -:  153:  {
       18:  154:    if ( shuffle(i, state) < 0 )
        -:  155:    {
    #####:  156:      return -1;
        -:  157:    }
        -:  158:  }
        -:  159:
        -:  160:  //draw player hands
       27:  161:  for (i = 0; i < numPlayers; i++)
        -:  162:    {  
        -:  163:      //initialize hand size to zero
       18:  164:      state->handCount[i] = 0;
       18:  165:      state->discardCount[i] = 0;
        -:  166:      //draw 5 cards
        -:  167:      // for (j = 0; j < 5; j++)
        -:  168:      //	{
        -:  169:      //	  drawCard(i, state);
        -:  170:      //	}
        -:  171:    }
        -:  172:  
        -:  173:  //set embargo tokens to 0 for all supply piles
      252:  174:  for (i = 0; i <= treasure_map; i++)
        -:  175:    {
      243:  176:      state->embargoTokens[i] = 0;
        -:  177:    }
        -:  178:
        -:  179:  //initialize first player's turn
        9:  180:  state->outpostPlayed = 0;
        9:  181:  state->phase = 0;
        9:  182:  state->numActions = 1;
        9:  183:  state->numBuys = 1;
        9:  184:  state->playedCardCount = 0;
        9:  185:  state->whoseTurn = 0;
        9:  186:  state->handCount[state->whoseTurn] = 0;
        -:  187:  //int it; move to top
        -:  188:
        -:  189:  //Moved draw cards to here, only drawing at the start of a turn
       54:  190:  for (it = 0; it < 5; it++){
       45:  191:    drawCard(state->whoseTurn, state);
        -:  192:  }
        -:  193:
        9:  194:  updateCoins(state->whoseTurn, state, 0);
        -:  195:
        9:  196:  return 0;
        -:  197:}
        -:  198:
       24:  199:int shuffle(int player, struct gameState *state) {
        -:  200:
        -:  201:  int newDeck[MAX_DECK];
       24:  202:  int newDeckPos = 0;
        -:  203:  int card;
        -:  204:  int i;
        -:  205:
       24:  206:  if (state->deckCount[player] < 1)
        6:  207:    return -1;
       18:  208:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  209:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  210:
      216:  211:  while (state->deckCount[player] > 0) {
      180:  212:    card = floor(Random() * state->deckCount[player]);
      180:  213:    newDeck[newDeckPos] = state->deck[player][card];
      180:  214:    newDeckPos++;
      630:  215:    for (i = card; i < state->deckCount[player]-1; i++) {
      450:  216:      state->deck[player][i] = state->deck[player][i+1];
        -:  217:    }
      180:  218:    state->deckCount[player]--;
        -:  219:  }
      198:  220:  for (i = 0; i < newDeckPos; i++) {
      180:  221:    state->deck[player][i] = newDeck[i];
      180:  222:    state->deckCount[player]++;
        -:  223:  }
        -:  224:
       18:  225:  return 0;
        -:  226:}
        -:  227:
    #####:  228:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  229:{	
        -:  230:  int card;
    #####:  231:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  232:
        -:  233:  //check if it is the right phase
    #####:  234:  if (state->phase != 0)
        -:  235:    {
    #####:  236:      return -1;
        -:  237:    }
        -:  238:	
        -:  239:  //check if player has enough actions
    #####:  240:  if ( state->numActions < 1 )
        -:  241:    {
    #####:  242:      return -1;
        -:  243:    }
        -:  244:	
        -:  245:  //get card played
    #####:  246:  card = handCard(handPos, state);
        -:  247:	
        -:  248:  //check if selected card is an action
    #####:  249:  if ( card < adventurer || card > treasure_map )
        -:  250:    {
    #####:  251:      return -1;
        -:  252:    }
        -:  253:	
        -:  254:  //play card
    #####:  255:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  256:    {
    #####:  257:      return -1;
        -:  258:    }
        -:  259:	
        -:  260:  //reduce number of actions
    #####:  261:  state->numActions--;
        -:  262:
        -:  263:  //update coins (Treasure cards may be added with card draws)
    #####:  264:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  265:	
    #####:  266:  return 0;
        -:  267:}
        -:  268:
       18:  269:int buyCard(int supplyPos, struct gameState *state) {
        -:  270:  int who;
        -:  271:  if (DEBUG){
        -:  272:    printf("Entering buyCard...\n");
        -:  273:  }
        -:  274:
        -:  275:  // I don't know what to do about the phase thing.
        -:  276:
       18:  277:  who = state->whoseTurn;
        -:  278:
       18:  279:  if (state->numBuys < 1){
        -:  280:    if (DEBUG)
        -:  281:      printf("You do not have any buys left\n");
        3:  282:    return -1;
       15:  283:  } else if (supplyCount(supplyPos, state) <1){
        -:  284:    if (DEBUG)
        -:  285:      printf("There are not any of that type of card left\n");
        3:  286:    return -1;
       12:  287:  } else if (state->coins < getCost(supplyPos)){
        -:  288:    if (DEBUG) 
        -:  289:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        6:  290:    return -1;
        -:  291:  } else {
        6:  292:    state->phase=1;
        -:  293:    //state->supplyCount[supplyPos]--;
        6:  294:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  295:  
        6:  296:    state->coins = (state->coins) - (getCost(supplyPos));
        6:  297:    state->numBuys--;
        -:  298:    if (DEBUG)
        -:  299:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  300:  }
        -:  301:
        -:  302:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  303:  //state->discardCount[who]++;
        -:  304:    
        6:  305:  return 0;
        -:  306:}
        -:  307:
       12:  308:int numHandCards(struct gameState *state) {
       12:  309:  return state->handCount[ whoseTurn(state) ];
        -:  310:}
        -:  311:
       12:  312:int handCard(int handPos, struct gameState *state) {
       12:  313:  int currentPlayer = whoseTurn(state);
       12:  314:  return state->hand[currentPlayer][handPos];
        -:  315:}
        -:  316:
       21:  317:int supplyCount(int card, struct gameState *state) {
       21:  318:  return state->supplyCount[card];
        -:  319:}
        -:  320:
    #####:  321:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  322:  int i;
    #####:  323:  int count = 0;
        -:  324:
    #####:  325:  for (i = 0; i < state->deckCount[player]; i++)
        -:  326:  {
    #####:  327:    if (state->deck[player][i] == card) count++;
        -:  328:  }
        -:  329:
    #####:  330:  for (i = 0; i < state->handCount[player]; i++)
        -:  331:  {
    #####:  332:    if (state->hand[player][i] == card) count++;
        -:  333:  }
        -:  334:
    #####:  335:  for (i = 0; i < state->discardCount[player]; i++)
        -:  336:  {
    #####:  337:    if (state->discard[player][i] == card) count++;
        -:  338:  }
        -:  339:
    #####:  340:  return count;
        -:  341:}
        -:  342:
       33:  343:int whoseTurn(struct gameState *state) {
       33:  344:  return state->whoseTurn;
        -:  345:}
        -:  346:
    #####:  347:int endTurn(struct gameState *state) {
        -:  348:  int k;
        -:  349:  int i;
    #####:  350:  int currentPlayer = whoseTurn(state);
        -:  351:  
        -:  352:  //Discard hand
    #####:  353:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  354:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  355:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  356:  }
    #####:  357:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  358:    
        -:  359:  //Code for determining the player
    #####:  360:  if (currentPlayer < (state->numPlayers - 1)){ 
    #####:  361:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  362:  }
        -:  363:  else{
    #####:  364:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  365:  }
        -:  366:
    #####:  367:  state->outpostPlayed = 0;
    #####:  368:  state->phase = 0;
    #####:  369:  state->numActions = 1;
    #####:  370:  state->coins = 0;
    #####:  371:  state->numBuys = 1;
    #####:  372:  state->playedCardCount = 0;
    #####:  373:  state->handCount[state->whoseTurn] = 0;
        -:  374:
        -:  375:  //int k; move to top
        -:  376:  //Next player draws hand
    #####:  377:  for (k = 0; k < 5; k++){
    #####:  378:    drawCard(state->whoseTurn, state);//Draw a card
        -:  379:  }
        -:  380:
        -:  381:  //Update money
    #####:  382:  updateCoins(state->whoseTurn, state , 0);
        -:  383:
    #####:  384:  return 0;
        -:  385:}
        -:  386:
       12:  387:int isGameOver(struct gameState *state) {
        -:  388:  int i;
        -:  389:  int j;
        -:  390:	
        -:  391:  //if stack of Province cards is empty, the game ends
       12:  392:  if (state->supplyCount[province] == 0)
        -:  393:  {
        3:  394:    return 1;
        -:  395:  }
        -:  396:
        -:  397:  //if three supply pile are at 0, the game ends
        9:  398:  j = 0;
      234:  399:  for (i = 0; i < 25; i++)
        -:  400:  {
      225:  401:    if (state->supplyCount[i] == 0)
        -:  402:    {
        9:  403:      j++;
        -:  404:    }
        -:  405:  }
        9:  406:  if ( j >= 3)
        -:  407:  {
        3:  408:    return 1;
        -:  409:  }
        -:  410:
        6:  411:  return 0;
        -:  412:}
        -:  413:
    #####:  414:int scoreFor (int player, struct gameState *state) {
        -:  415:
        -:  416:  int i;
    #####:  417:  int score = 0;
        -:  418:  //score from hand
    #####:  419:  for (i = 0; i < state->handCount[player]; i++)
        -:  420:  {
    #####:  421:    if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  422:    if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  423:    if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  424:    if (state->hand[player][i] == province) { score = score + 6; };
    #####:  425:    if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  426:    if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  427:  }
        -:  428:
        -:  429:  //score from discard
    #####:  430:  for (i = 0; i < state->discardCount[player]; i++)
        -:  431:  {
    #####:  432:    if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  433:    if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  434:    if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  435:    if (state->discard[player][i] == province) { score = score + 6; };
    #####:  436:    if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  437:    if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  438:  }
        -:  439:
        -:  440:  //score from deck
    #####:  441:  for (i = 0; i < state->discardCount[player]; i++)
        -:  442:  {
    #####:  443:    if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  444:    if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  445:    if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  446:    if (state->deck[player][i] == province) { score = score + 6; };
    #####:  447:    if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  448:    if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
        -:  449:  }
        -:  450:
    #####:  451:  return score;
        -:  452:}
        -:  453:
    #####:  454:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  455:  int i;	
        -:  456:  int j;
        -:  457:  int highScore;
        -:  458:  int currentPlayer;
        -:  459:
        -:  460:  //get score for each player
    #####:  461:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  462:    {
        -:  463:      //set unused player scores to -9999
    #####:  464:      if (i >= state->numPlayers)
        -:  465:      {
    #####:  466:        players[i] = -9999;
        -:  467:      }
        -:  468:          else
        -:  469:      {
    #####:  470:        players[i] = scoreFor (i, state);
        -:  471:      }
        -:  472:    }
        -:  473:
        -:  474:  //find highest score
    #####:  475:  j = 0;
    #####:  476:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  477:    {
    #####:  478:      if (players[i] > players[j])
        -:  479:      {
    #####:  480:        j = i;
        -:  481:      }
        -:  482:    }
    #####:  483:  highScore = players[j];
        -:  484:
        -:  485:  //add 1 to players who had less turns
    #####:  486:  currentPlayer = whoseTurn(state);
    #####:  487:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  488:  {
    #####:  489:    if ( players[i] == highScore && i > currentPlayer )
        -:  490:    {
    #####:  491:      players[i]++;
        -:  492:    }
        -:  493:  }
        -:  494:
        -:  495:  //find new highest score
    #####:  496:  j = 0;
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  498:  {
    #####:  499:    if ( players[i] > players[j] )
        -:  500:    {
    #####:  501:      j = i;
        -:  502:    }
        -:  503:  }
    #####:  504:  highScore = players[j];
        -:  505:
        -:  506:  //set winners in array to 1 and rest to 0
    #####:  507:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  508:  {
    #####:  509:    if ( players[i] == highScore )
        -:  510:    {
    #####:  511:      players[i] = 1;
        -:  512:    }
        -:  513:        else
        -:  514:    {
    #####:  515:      players[i] = 0;
        -:  516:    }
        -:  517:  }
        -:  518:
    #####:  519:  return 0;
        -:  520:}
        -:  521:
       75:  522:int drawCard(int player, struct gameState *state){	
        -:  523:  int count;
        -:  524:  int deckCounter;
       75:  525:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  526:    
        -:  527:    //Step 1 Shuffle the discard pile back into a deck
        -:  528:    int i;
        -:  529:    //Move discard to deck
        3:  530:    for (i = 0; i < state->discardCount[player];i++){
    #####:  531:      state->deck[player][i] = state->discard[player][i];
    #####:  532:      state->discard[player][i] = -1;
        -:  533:    }
        -:  534:
        3:  535:    state->deckCount[player] = state->discardCount[player];
        3:  536:    state->discardCount[player] = 0;//Reset discard
        -:  537:
        -:  538:    //Shufffle the deck
        3:  539:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  540:   
        -:  541:    if (DEBUG){//Debug statements
        -:  542:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  543:    }
        -:  544:    
        3:  545:    state->discardCount[player] = 0;
        -:  546:
        -:  547:    //Step 2 Draw Card
        3:  548:    count = state->handCount[player];//Get current player's hand count
        -:  549:    
        -:  550:    if (DEBUG){//Debug statements
        -:  551:      printf("Current hand count: %d\n", count);
        -:  552:    }
        -:  553:    
        3:  554:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  555:
        3:  556:    if (deckCounter == 0)
        3:  557:      return -1;
        -:  558:
    #####:  559:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  560:    state->deckCount[player]--;
    #####:  561:    state->handCount[player]++;//Increment hand count
        -:  562:  }
        -:  563:
        -:  564:  else{
       72:  565:    int count = state->handCount[player];//Get current hand count for player
        -:  566:    int deckCounter;
        -:  567:    if (DEBUG){//Debug statements
        -:  568:      printf("Current hand count: %d\n", count);
        -:  569:    }
        -:  570:
       72:  571:    deckCounter = state->deckCount[player];//Create holder for the deck count
       72:  572:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       72:  573:    state->deckCount[player]--;
       72:  574:    state->handCount[player]++;//Increment hand count
        -:  575:  }
        -:  576:
       72:  577:  return 0;
        -:  578:}
        -:  579:
       18:  580:int getCost(int cardNumber)
        -:  581:{
       18:  582:  switch( cardNumber ) 
        -:  583:    {
        -:  584:    case curse:
    #####:  585:      return 0;
        -:  586:    case estate:
    #####:  587:      return 2;
        -:  588:    case duchy:
    #####:  589:      return 5;
        -:  590:    case province:
       18:  591:      return 8;
        -:  592:    case copper:
    #####:  593:      return 0;
        -:  594:    case silver:
    #####:  595:      return 3;
        -:  596:    case gold:
    #####:  597:      return 6;
        -:  598:    case adventurer:
    #####:  599:      return 6;
        -:  600:    case council_room:
    #####:  601:      return 5;
        -:  602:    case feast:
    #####:  603:      return 4;
        -:  604:    case gardens:
    #####:  605:      return 4;
        -:  606:    case mine:
    #####:  607:      return 5;
        -:  608:    case remodel:
    #####:  609:      return 4;
        -:  610:    case smithy:
    #####:  611:      return 4;
        -:  612:    case village:
    #####:  613:      return 3;
        -:  614:    case baron:
    #####:  615:      return 4;
        -:  616:    case great_hall:
    #####:  617:      return 3;
        -:  618:    case minion:
    #####:  619:      return 5;
        -:  620:    case steward:
    #####:  621:      return 3;
        -:  622:    case tribute:
    #####:  623:      return 5;
        -:  624:    case ambassador:
    #####:  625:      return 3;
        -:  626:    case cutpurse:
    #####:  627:      return 4;
        -:  628:    case embargo: 
    #####:  629:      return 2;
        -:  630:    case outpost:
    #####:  631:      return 5;
        -:  632:    case salvager:
    #####:  633:      return 4;
        -:  634:    case sea_hag:
    #####:  635:      return 4;
        -:  636:    case treasure_map:
    #####:  637:      return 4;
        -:  638:    }
        -:  639:	
    #####:  640:  return -1;
        -:  641:}
        -:  642:
        -:  643:
        9:  644:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  645:{
        -:  646:  int i, j, k;
        9:  647:  int index=0;
        9:  648:  int currentPlayer = whoseTurn(state);
        9:  649:  int nextPlayer = currentPlayer + 1;
        9:  650:  int tributeRevealedCards[2] = {-1, -1};
        -:  651:  int temphand[MAX_HAND];// moved above the if statement
        9:  652:  int drawntreasure=0;
        9:  653:  int cardDrawn=0;
        9:  654:  int z = 0;// this is the counter for the temp hand
        9:  655:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  656:    nextPlayer = 0;
        -:  657:  }
        -:  658:	
        -:  659:  //uses switch to select card and perform actions
        9:  660:  switch( card ) 
        -:  661:    {
        -:  662:    case adventurer:
        3:  663:      playAdventurer(state, drawntreasure, z, currentPlayer, cardDrawn, temphand);
        3:  664:      return 0;
        -:  665:			
        -:  666:    case council_room:
    #####:  667:			playCouncilRoom(state, handPos, currentPlayer);
    #####:  668:      return 0;
        -:  669:			
        -:  670:    case feast:
    #####:  671:      playFeast(state, choice1, temphand, currentPlayer);			
    #####:  672:      return 0;
        -:  673:			
        -:  674:    case gardens:
    #####:  675:      return -1;
        -:  676:			
        -:  677:    case mine:
    #####:  678:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  679:
    #####:  680:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  681:      {
    #####:  682:        return -1;
        -:  683:      }
        -:  684:        
    #####:  685:          if (choice2 > treasure_map || choice2 < curse)
        -:  686:      {
    #####:  687:        return -1;
        -:  688:      }
        -:  689:
    #####:  690:          if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  691:      {
    #####:  692:        return -1;
        -:  693:      }
        -:  694:
    #####:  695:          gainCard(choice2, state, 2, currentPlayer);
        -:  696:
        -:  697:          //discard card from hand
    #####:  698:          discardCard(handPos, currentPlayer, state, 0);
        -:  699:
        -:  700:          //discard trashed card
    #####:  701:          for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  702:      {
    #####:  703:        if (state->hand[currentPlayer][i] == j)
        -:  704:          {
    #####:  705:            discardCard(i, currentPlayer, state, 0);			
    #####:  706:            break;
        -:  707:          }
        -:  708:      }
        -:  709:			
    #####:  710:      return 0;
        -:  711:			
        -:  712:    case remodel:
    #####:  713:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  714:
    #####:  715:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  716:      {
    #####:  717:        return -1;
        -:  718:      }
        -:  719:
    #####:  720:          gainCard(choice2, state, 0, currentPlayer);
        -:  721:
        -:  722:          //discard card from hand
    #####:  723:          discardCard(handPos, currentPlayer, state, 0);
        -:  724:
        -:  725:          //discard trashed card
    #####:  726:          for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  727:      {
    #####:  728:        if (state->hand[currentPlayer][i] == j)
        -:  729:          {
    #####:  730:            discardCard(i, currentPlayer, state, 0);			
    #####:  731:            break;
        -:  732:          }
        -:  733:      }
        -:  734:
    #####:  735:      return 0;
        -:  736:		
        -:  737:    case smithy:
        3:  738:      playSmithy(state, handPos, currentPlayer);
        3:  739:      return 0;
        -:  740:		
        -:  741:    case village:
        -:  742:      //+1 Card
        3:  743:      drawCard(currentPlayer, state);
        -:  744:			
        -:  745:      //+2 Actions
        3:  746:      state->numActions = state->numActions + 2;
        -:  747:			
        -:  748:      //discard played card from hand
        3:  749:      discardCard(handPos, currentPlayer, state, 0);
        3:  750:      return 0;
        -:  751:		
        -:  752:    case baron:
    #####:  753:      state->numBuys++;//Increase buys by 1!
    #####:  754:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  755:      int p = 0;//Iterator for hand!
    #####:  756:      int card_not_discarded = 1;//Flag for discard set!
    #####:  757:      while(card_not_discarded){
    #####:  758:        if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  759:          state->coins += 4;//Add 4 coins to the amount of coins
    #####:  760:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  761:          state->discardCount[currentPlayer]++;
    #####:  762:          for (;p < state->handCount[currentPlayer]; p++){
    #####:  763:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  764:          }
    #####:  765:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  766:          state->handCount[currentPlayer]--;
    #####:  767:          card_not_discarded = 0;//Exit the loop
        -:  768:        }
    #####:  769:        else if (p > state->handCount[currentPlayer]){
        -:  770:          if(DEBUG) {
        -:  771:            printf("No estate cards in your hand, invalid choice\n");
        -:  772:            printf("Must gain an estate if there are any\n");
        -:  773:          }
    #####:  774:          if (supplyCount(estate, state) > 0){
    #####:  775:            gainCard(estate, state, 0, currentPlayer);
    #####:  776:            state->supplyCount[estate]--;//Decrement estates
    #####:  777:            if (supplyCount(estate, state) == 0){
    #####:  778:        isGameOver(state);
        -:  779:            }
        -:  780:          }
    #####:  781:          card_not_discarded = 0;//Exit the loop
        -:  782:        }
        -:  783:              
        -:  784:        else{
    #####:  785:          p++;//Next card
        -:  786:        }
        -:  787:      }
        -:  788:          }
        -:  789:              
        -:  790:          else{
    #####:  791:      if (supplyCount(estate, state) > 0){
    #####:  792:        gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  793:        state->supplyCount[estate]--;//Decrement Estates
    #####:  794:        if (supplyCount(estate, state) == 0){
    #####:  795:          isGameOver(state);
        -:  796:        }
        -:  797:      }
        -:  798:          }
        -:  799:          
        -:  800:      
    #####:  801:      return 0;
        -:  802:		
        -:  803:    case great_hall:
        -:  804:      //+1 Card
    #####:  805:      drawCard(currentPlayer, state);
        -:  806:			
        -:  807:      //+1 Actions
    #####:  808:      state->numActions++;
        -:  809:			
        -:  810:      //discard card from hand
    #####:  811:      discardCard(handPos, currentPlayer, state, 0);
    #####:  812:      return 0;
        -:  813:		
        -:  814:    case minion:
        -:  815:      //+1 action
    #####:  816:      state->numActions++;
        -:  817:			
        -:  818:      //discard card from hand
    #####:  819:      discardCard(handPos, currentPlayer, state, 0);
        -:  820:			
    #####:  821:      if (choice1)		//+2 coins
        -:  822:      {
    #####:  823:        state->coins = state->coins + 2;
        -:  824:      }
        -:  825:          
    #####:  826:          else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  827:      {
        -:  828:        //discard hand
    #####:  829:        while(numHandCards(state) > 0)
        -:  830:          {
    #####:  831:            discardCard(handPos, currentPlayer, state, 0);
        -:  832:          }
        -:  833:            
        -:  834:        //draw 4
    #####:  835:        for (i = 0; i < 4; i++)
        -:  836:          {
    #####:  837:            drawCard(currentPlayer, state);
        -:  838:          }
        -:  839:            
        -:  840:        //other players discard hand and redraw if hand size > 4
    #####:  841:        for (i = 0; i < state->numPlayers; i++)
        -:  842:          {
    #####:  843:            if (i != currentPlayer)
        -:  844:        {
    #####:  845:          if ( state->handCount[i] > 4 )
        -:  846:          {
        -:  847:              //discard hand
    #####:  848:              while( state->handCount[i] > 0 )
        -:  849:          {
    #####:  850:            discardCard(handPos, i, state, 0);
        -:  851:          }
        -:  852:                  
        -:  853:              //draw 4
    #####:  854:              for (j = 0; j < 4; j++)
        -:  855:          {
    #####:  856:            drawCard(i, state);
        -:  857:          }
        -:  858:            }
        -:  859:        }
        -:  860:          }    
        -:  861:      }
    #####:  862:      return 0;
        -:  863:		
        -:  864:    case steward:
    #####:  865:      playSteward(state, choice1, choice2, choice3, handPos, currentPlayer);
    #####:  866:      return 0;
        -:  867:		
        -:  868:    case tribute:
    #####:  869:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  870:      if (state->deckCount[nextPlayer] > 0){
    #####:  871:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  872:        state->deckCount[nextPlayer]--;
        -:  873:      }
    #####:  874:      else if (state->discardCount[nextPlayer] > 0){
    #####:  875:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  876:        state->discardCount[nextPlayer]--;
        -:  877:      }
        -:  878:      else{
        -:  879:        //No Card to Reveal
        -:  880:        if (DEBUG){
        -:  881:          printf("No cards to reveal\n");
        -:  882:        }
        -:  883:      }
        -:  884:          }
        -:  885:          
        -:  886:          else{
    #####:  887:      if (state->deckCount[nextPlayer] == 0){
    #####:  888:        for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  889:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  890:          state->deckCount[nextPlayer]++;
    #####:  891:          state->discard[nextPlayer][i] = -1;
    #####:  892:          state->discardCount[nextPlayer]--;
        -:  893:        }
        -:  894:              
    #####:  895:        shuffle(nextPlayer,state);//Shuffle the deck
        -:  896:      } 
    #####:  897:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  898:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  899:      state->deckCount[nextPlayer]--;
    #####:  900:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  901:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  902:      state->deckCount[nextPlayer]--;
        -:  903:          }    
        -:  904:              
    #####:  905:          if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
    #####:  906:            state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  907:            state->playedCardCount++;
    #####:  908:            tributeRevealedCards[1] = -1;
        -:  909:          }
        -:  910:
    #####:  911:        for (i = 0; i <= 2; i ++){
    #####:  912:            if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  913:              state->coins += 2;
        -:  914:            }
        -:  915:                  
    #####:  916:            else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  917:              drawCard(currentPlayer, state);
    #####:  918:              drawCard(currentPlayer, state);
        -:  919:            }
        -:  920:            else{//Action Card
    #####:  921:              state->numActions = state->numActions + 2;
        -:  922:            }
        -:  923:        }
        -:  924:	    
    #####:  925:      return 0;
        -:  926:		
        -:  927:    case ambassador:
    #####:  928:      j = 0;		//used to check if player has enough cards to discard
        -:  929:
    #####:  930:      if (choice2 > 2 || choice2 < 0)
        -:  931:      {
    #####:  932:        return -1;				
        -:  933:      }
        -:  934:
    #####:  935:      if (choice1 == handPos)
        -:  936:      {
    #####:  937:        return -1;
        -:  938:      }
        -:  939:
    #####:  940:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  941:      {
    #####:  942:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  943:        {
    #####:  944:          j++;
        -:  945:        }
        -:  946:      }
    #####:  947:      if (j < choice2)
        -:  948:      {
    #####:  949:        return -1;				
        -:  950:      }
        -:  951:
        -:  952:          if (DEBUG) 
        -:  953:      printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  954:
        -:  955:      //increase supply count for choosen card by amount being discarded
    #####:  956:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  957:      
        -:  958:      //each other player gains a copy of revealed card
    #####:  959:      for (i = 0; i < state->numPlayers; i++)
        -:  960:      {
    #####:  961:        if (i != currentPlayer)
        -:  962:        {
    #####:  963:          gainCard(state->hand[currentPlayer][choice1], state, 0, i);
        -:  964:        }
        -:  965:      }
        -:  966:
        -:  967:      //discard played card from hand
    #####:  968:      discardCard(handPos, currentPlayer, state, 0);			
        -:  969:
        -:  970:      //trash copies of cards returned to supply
    #####:  971:      for (j = 0; j < choice2; j++)
        -:  972:      {
    #####:  973:        for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  974:        {
    #####:  975:          if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  976:          {
    #####:  977:            discardCard(i, currentPlayer, state, 1);
    #####:  978:            break;
        -:  979:          }
        -:  980:        }
        -:  981:      }			
        -:  982:
    #####:  983:      return 0;
        -:  984:		
        -:  985:    case cutpurse:
    #####:  986:      updateCoins(currentPlayer, state, 2);
    #####:  987:      for (i = 0; i < state->numPlayers; i++)
        -:  988:      {
    #####:  989:        if (i != currentPlayer)
        -:  990:        {
    #####:  991:            for (j = 0; j < state->handCount[i]; j++)
        -:  992:            {
    #####:  993:              if (state->hand[i][j] == copper)
        -:  994:              {
    #####:  995:                discardCard(j, i, state, 0);
    #####:  996:                break;
        -:  997:              }
    #####:  998:              if (j == state->handCount[i])
        -:  999:              {
    #####: 1000:                for (k = 0; k < state->handCount[i]; k++)
        -: 1001:                {
        -: 1002:                  if (DEBUG)
        -: 1003:                    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1004:                }	
    #####: 1005:                break;
        -: 1006:              }		
        -: 1007:            }     
        -: 1008:          }     
        -: 1009:      }				
        -: 1010:
        -: 1011:      //discard played card from hand
    #####: 1012:      discardCard(handPos, currentPlayer, state, 0);			
    #####: 1013:      return 0;
        -: 1014:		
        -: 1015:    case embargo: 
        -: 1016:      //+2 Coins
    #####: 1017:      state->coins = state->coins + 2;
        -: 1018:			
        -: 1019:      //see if selected pile is in play
    #####: 1020:      if ( state->supplyCount[choice1] == -1 )
        -: 1021:      {
    #####: 1022:        return -1;
        -: 1023:      }
        -: 1024:			
        -: 1025:      //add embargo token to selected supply pile
    #####: 1026:      state->embargoTokens[choice1]++;
        -: 1027:			
        -: 1028:      //trash card
    #####: 1029:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1030:      return 0;
        -: 1031:		
        -: 1032:    case outpost:
        -: 1033:      //set outpost flag
    #####: 1034:      state->outpostPlayed++;
        -: 1035:			
        -: 1036:      //discard card
    #####: 1037:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1038:      return 0;
        -: 1039:		
        -: 1040:    case salvager:
        -: 1041:      //+1 buy
    #####: 1042:      state->numBuys++;
        -: 1043:			
    #####: 1044:      if (choice1)
        -: 1045:      {
        -: 1046:        //gain coins equal to trashed card
    #####: 1047:        state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1048:        //trash card
    #####: 1049:        discardCard(choice1, currentPlayer, state, 1);	
        -: 1050:      }
        -: 1051:			
        -: 1052:      //discard card
    #####: 1053:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1054:      return 0;
        -: 1055:		
        -: 1056:    case sea_hag:
    #####: 1057:      for (i = 0; i < state->numPlayers; i++){
    #####: 1058:        if (i != currentPlayer){
    #####: 1059:          state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1060:          state->discardCount[i]++;
    #####: 1061:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1062:        }
        -: 1063:      }
    #####: 1064:      return 0;
        -: 1065:		
        -: 1066:    case treasure_map:
        -: 1067:      //search hand for another treasure_map
    #####: 1068:      index = -1;
    #####: 1069:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1070:      {
    #####: 1071:        if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1072:          {
    #####: 1073:            index = i;
    #####: 1074:            break;
        -: 1075:          }
        -: 1076:      }
    #####: 1077:      if (index > -1)
        -: 1078:      {
        -: 1079:        //trash both treasure cards
    #####: 1080:        discardCard(handPos, currentPlayer, state, 1);
    #####: 1081:        discardCard(index, currentPlayer, state, 1);
        -: 1082:
        -: 1083:        //gain 4 Gold cards
    #####: 1084:        for (i = 0; i < 4; i++)
        -: 1085:          {
    #####: 1086:            gainCard(gold, state, 1, currentPlayer);
        -: 1087:          }
        -: 1088:            
        -: 1089:        //return success
    #####: 1090:        return 1;
        -: 1091:      }
        -: 1092:			
        -: 1093:      //no second treasure_map found in hand
    #####: 1094:      return -1;
        -: 1095:    }
        -: 1096:	
    #####: 1097:  return -1;
        -: 1098:}
        -: 1099:
        3: 1100:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1101:{	
        -: 1102:  //if card is not trashed, added to Played pile 
        3: 1103:  if (trashFlag < 1)
        -: 1104:  {
        -: 1105:    //add card to played pile
        3: 1106:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        3: 1107:    state->playedCardCount++;
        -: 1108:  }
        -: 1109:	
        -: 1110:  //set played card to -1
        3: 1111:  state->hand[currentPlayer][handPos] = -1;
        -: 1112:	
        -: 1113:  //remove card from player's hand
        3: 1114:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1115:    {
        -: 1116:      //reduce number of cards in hand
    #####: 1117:      state->handCount[currentPlayer]--;
        -: 1118:    }
        3: 1119:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1120:    {
        -: 1121:      //reduce number of cards in hand
    #####: 1122:      state->handCount[currentPlayer]--;
        -: 1123:    }
        -: 1124:  else 	
        -: 1125:    {
        -: 1126:      //replace discarded card with last card in hand
        3: 1127:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1128:      //set last card to -1
        3: 1129:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1130:      //reduce number of cards in hand
        3: 1131:      state->handCount[currentPlayer]--;
        -: 1132:    }
        -: 1133:	
        3: 1134:  return 0;
        -: 1135:}
        -: 1136:
        6: 1137:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1138:{
        -: 1139:  //Note: supplyPos is enum of choosen card
        -: 1140:	
        -: 1141:  //check if supply pile is empty (0) or card is not used in game (-1)
        6: 1142:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1143:    {
    #####: 1144:      return -1;
        -: 1145:    }
        -: 1146:	
        -: 1147:  //added card for [whoseTurn] current player:
        -: 1148:  // toFlag = 0 : add to discard
        -: 1149:  // toFlag = 1 : add to deck
        -: 1150:  // toFlag = 2 : add to hand
        -: 1151:
        6: 1152:  if (toFlag == 1)
        -: 1153:    {
    #####: 1154:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1155:      state->deckCount[player]++;
        -: 1156:    }
        6: 1157:  else if (toFlag == 2)
        -: 1158:    {
    #####: 1159:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1160:      state->handCount[player]++;
        -: 1161:    }
        -: 1162:  else
        -: 1163:    {
        6: 1164:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        6: 1165:      state->discardCount[player]++;
        -: 1166:    }
        -: 1167:	
        -: 1168:  //decrease number in supply pile
        6: 1169:  state->supplyCount[supplyPos]--;
        -: 1170:	 
        6: 1171:  return 0;
        -: 1172:}
        -: 1173:
        9: 1174:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1175:{
        -: 1176:  int i;
        -: 1177:	
        -: 1178:  //reset coin count
        9: 1179:  state->coins = 0;
        -: 1180:
        -: 1181:  //add coins for each Treasure card in player's hand
       54: 1182:  for (i = 0; i < state->handCount[player]; i++)
        -: 1183:    {
       45: 1184:      if (state->hand[player][i] == copper)
        -: 1185:	{
       36: 1186:	  state->coins += 1;
        -: 1187:	}
        9: 1188:      else if (state->hand[player][i] == silver)
        -: 1189:	{
    #####: 1190:	  state->coins += 2;
        -: 1191:	}
        9: 1192:      else if (state->hand[player][i] == gold)
        -: 1193:	{
    #####: 1194:	  state->coins += 3;
        -: 1195:	}	
        -: 1196:    }	
        -: 1197:  //add bonus
        9: 1198:  state->coins += bonus;
        -: 1199:
        9: 1200:  return 0;
        -: 1201:}
        -: 1202:
        3: 1203:void playAdventurer(struct gameState *state, int drawntreasure, int z, int currentPlayer, int cardDrawn, int *temphand){
        -: 1204:  //while(drawntreasure<2){   //Original line
       24: 1205:  while(drawntreasure<4){   //Bug: allows adventurer to draw more treasure cards than intended, artem 181013
       18: 1206:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        3: 1207:      shuffle(currentPlayer, state);
        -: 1208:    }
       18: 1209:    drawCard(currentPlayer, state);
       18: 1210:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       18: 1211:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold){
       12: 1212:      drawntreasure++; 
        -: 1213:    }
        -: 1214:    else{
        6: 1215:      temphand[z]=cardDrawn;
        6: 1216:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        6: 1217:      z++;
        -: 1218:    }
        -: 1219:  }
       12: 1220:  while(z-1>=0){
        6: 1221:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        6: 1222:    z=z-1;
        -: 1223:  }
        3: 1224:}
        -: 1225:
    #####: 1226:void playCouncilRoom(struct gameState *state, int handPos, int currentPlayer){
        -: 1227:  //Used variables: state, handPos, currentPlayer
        -: 1228:  int i;
        -: 1229:  //+4 Cards
    #####: 1230:  for (i = 0; i < 4; i++)
        -: 1231:	{
    #####: 1232:	  drawCard(currentPlayer, state);
        -: 1233:	}
        -: 1234:			
        -: 1235:  //+1 Buy
    #####: 1236:  state->numBuys++; 
        -: 1237:  //Each other player draws a card
    #####: 1238:  for (i = 0; i < state->numPlayers; i++)
        -: 1239:	{
    #####: 1240:	  if ( i != currentPlayer )
        -: 1241:    {
    #####: 1242:      drawCard(i, state);
        -: 1243:    }
        -: 1244:	}		
        -: 1245:  //put played card in played card pile
    #####: 1246:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1247:}
        -: 1248:
    #####: 1249:void playFeast(struct gameState *state, int choice1, int *temphand, int currentPlayer){
        -: 1250:  //Used variables: state, choice1, temphand, currentPlayer, 
        -: 1251:  int i, x;
        -: 1252:  //gain card with cost up to 5
        -: 1253:  //Backup hand
    #####: 1254:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1255:    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####: 1256:    state->hand[currentPlayer][i] = -1;//Set to nothing
        -: 1257:  }
        -: 1258:  //Backup hand
        -: 1259:
        -: 1260:  //Update Coins for Buy
        -: 1261:  //updateCoins(currentPlayer, state, 5); //Bug: commented out, artem 181013
    #####: 1262:  x = 1;//Condition to loop on
    #####: 1263:  while( x == 1) {//Buy one card
    #####: 1264:    if (supplyCount(choice1, state) <= 0){
        -: 1265:      if (DEBUG){
        -: 1266:        printf("None of that card left, sorry!\n");
        -: 1267:      }
        -: 1268:      if (DEBUG){
        -: 1269:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1270:      }
        -: 1271:    }
    #####: 1272:    else if (state->coins < getCost(choice1)){
    #####: 1273:      printf("That card is too expensive!\n");
        -: 1274:
        -: 1275:      if (DEBUG){
        -: 1276:        printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1277:      }
        -: 1278:    }
        -: 1279:    else{
        -: 1280:      if (DEBUG){
        -: 1281:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1282:      }
    #####: 1283:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####: 1284:      x = 0;//No more buying cards
        -: 1285:
        -: 1286:      if (DEBUG){
        -: 1287:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1288:      }
        -: 1289:    }
        -: 1290:  }     
        -: 1291:
        -: 1292:  //Reset Hand
    #####: 1293:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####: 1294:    state->hand[currentPlayer][i] = temphand[i];
    #####: 1295:    temphand[i] = -1;
        -: 1296:  }
        -: 1297:  //Reset Hand
    #####: 1298:}
        -: 1299:
        3: 1300:void playSmithy(struct gameState *state, int handPos, int currentPlayer){
        -: 1301:  // Variables used:  currentPlayer, handPos, state
        -: 1302:  //+3 Cards
        -: 1303:  int i;
       12: 1304:  for (i = 0; i < 3; i++){
        9: 1305:	  drawCard(currentPlayer, state);
        -: 1306:	}		
        -: 1307:  //discard card from hand
        -: 1308:  //discardCard(handPos, currentPlayer, state, 0); //Bug: discardCard line commented out, artem 181013
        3: 1309:}
        -: 1310:
    #####: 1311:void playSteward(struct gameState *state, int choice1, int choice2, int choice3, int handPos, int currentPlayer){
        -: 1312:    // Variables used:  state, choice1, choice2, choice3, handPos, currentPlayer)
    #####: 1313:  if (choice1 == 1)
        -: 1314:	{
        -: 1315:	  //+2 cards
    #####: 1316:	  drawCard(currentPlayer, state);
    #####: 1317:	  drawCard(currentPlayer, state);
        -: 1318:	}
    #####: 1319:  else if (choice1 == 2)
        -: 1320:	{
        -: 1321:	  //+2 coins
        -: 1322:	  //state->coins = state->coins + 2; //original line
    #####: 1323:    state->coins = state->coins + 20; // Bug/change: extra coins, artem 181013
        -: 1324:	}
        -: 1325:  else
        -: 1326:	{
        -: 1327:	  //trash 2 cards in hand
    #####: 1328:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1329:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1330:	}		
        -: 1331:  //discard card from hand
    #####: 1332:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1333:}
        -: 1334:
        -: 1335://end of dominion.c
        -: 1336:
